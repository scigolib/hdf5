# GolangCI-Lint v2.5 Configuration for HDF5 Go Library
# Documentation: https://golangci-lint.run/docs/configuration/
# AGGRESSIVE CONFIGURATION - Catches more issues during development

version: "2"

run:
  timeout: 5m
  tests: true

linters:
  # Enable comprehensive set of linters for production-quality code
  enable:
    # Code quality and complexity
    - gocyclo       # Check cyclomatic complexity
    - gocognit      # Check cognitive complexity
    - funlen        # Check function length
    - maintidx      # Maintainability index
    - cyclop        # Check cyclomatic complexity (alternative)
    - nestif        # Reports deeply nested if statements

    # Bug detection
    - govet         # Standard Go vet (includes copylocks!)
    - staticcheck   # Comprehensive static analysis
    - errcheck      # Check that errors are handled
    - errorlint     # Check error wrapping
    - gosec         # Security issues
    - nilnil        # Check that functions don't return nil both ways
    - nilerr        # Check nil error returns
    - nilnesserr    # Check nil error returns patterns
    - ineffassign   # Detect ineffectual assignments

    # Code style and consistency
    - misspell      # Check for misspelled words
    - whitespace    # Check for trailing whitespace
    - unconvert     # Remove unnecessary type conversions
    - unparam       # Detect unused function parameters

    # Naming conventions
    - errname       # Check error naming conventions
    - revive        # Fast, configurable, extensible linter

    # Performance
    - prealloc      # Find slice declarations that could be preallocated
    - bodyclose     # Check HTTP response bodies are closed
    - makezero      # Find slice declarations with non-zero initial length

    # Code practices
    - goconst       # Find repeated strings that could be constants
    - gocritic      # Comprehensive code checker
    - goprintffuncname  # Check printf-like function names
    - nolintlint    # Check nolint directives are used correctly
    - nakedret      # Checks for naked returns

    # Comments and documentation
    - godot         # Check comments end in periods
    # godox disabled - TODO comments are acceptable during development

    # Additional quality checkers
    - dupl          # Detect duplicate code
    - dogsled       # Check for assignments with too many blank identifiers
    - durationcheck # Check for two durations multiplied together

  settings:
    govet:
      # EXPLICITLY ENABLE copylocks to catch mutex copying issues
      enable:
        - copylocks
      # Disable fieldalignment (memory optimization not critical)
      disable:
        - fieldalignment

    gocyclo:
      # Lower threshold for production code
      min-complexity: 15

    cyclop:
      # Max complexity
      max-complexity: 15

    funlen:
      # Allow reasonably long functions for HDF5 parsing logic
      lines: 120
      statements: 60

    gocognit:
      # Cognitive complexity threshold
      min-complexity: 20

    misspell:
      locale: US

    nestif:
      # Max nesting level
      min-complexity: 4

    revive:
      # Enable important rules for code quality
      rules:
        - name: var-naming
        - name: exported
        - name: error-return
        - name: error-naming
        - name: if-return
        - name: increment-decrement
        - name: var-declaration
        - name: package-comments
        - name: range
        - name: receiver-naming
        - name: time-naming
        - name: unexported-return
        - name: indent-error-flow
        - name: errorf
        - name: empty-block
        - name: superfluous-else
        - name: unused-parameter
        - name: unreachable-code
        - name: redefines-builtin-id

    gocritic:
      # Enable important checks
      enabled-tags:
        - diagnostic
        - style
        - performance

      # Disable overly opinionated/experimental checks
      disabled-checks:
        - commentFormatting  # Too opinionated about comment style
        - whyNoLint          # We document nolints when needed
        - unnamedResult      # Named results can reduce readability

      settings:
        hugeParam:
          # HDF5 structures can be large (headers, datatypes)
          # Default is 80 bytes, allow larger structs for HDF5 parsing
          sizeThreshold: 256

  # Exclusions (v2 structure: linters.exclusions.rules)
  exclusions:
    rules:
      - path: _test\.go
        linters:
          - gocyclo
          - cyclop
          - funlen
          - maintidx
          - errcheck
          - gosec
          - goconst
          - dupl

      # internal/utils - utility package name is acceptable
      - path: internal/utils/.*\.go
        linters:
          - revive        # Skip package naming rules
        text: "var-naming: avoid meaningless package names"

      - path: ".*\\.pb\\.go"  # Generated files
        linters:
          - revive
          - gocritic

      # cmd/ - utility programs can be less strict
      - path: cmd/.*\.go
        linters:
          - gocognit     # Command-line tools can be complex
          - nestif       # CLI logic acceptable
          - funlen       # Main functions can be longer
          - gocyclo      # CLI complexity acceptable
          - cyclop       # CLI complexity acceptable
          - godot        # Command output formatting
          - gosec        # CLI file operations acceptable
          - gocritic     # CLI patterns acceptable

      # Superblock parser - complex HDF5 format handling
      - path: internal/core/superblock\.go
        linters:
          - funlen       # Superblock parsing naturally longer
          - gocyclo      # Multiple version handling
          - cyclop       # Version branching complexity
          - nestif       # Version-specific logic nesting
          - gocognit     # Complex version detection

      # Object header parser - complex HDF5 format
      - path: internal/core/objectheader\.go
        linters:
          - funlen       # Header parsing is complex
          - gocyclo      # Message type switching
          - cyclop       # Message parsing complexity
          - nestif       # Message iteration nesting
          - gocognit     # Complex message processing

      # Object header v1 - legacy format complexity
      - path: internal/core/objectheader_v1\.go
        linters:
          - funlen       # Header parsing is complex
          - gocyclo      # Message type switching
          - cyclop       # Message parsing complexity
          - nestif       # Message iteration nesting
          - gocognit     # Complex message processing

      # Dataset readers - complex data layout handling
      - path: internal/core/dataset_reader.*\.go
        linters:
          - funlen       # Dataset reading logic
          - gocyclo      # Layout type handling
          - cyclop       # Compression/chunking logic
          - nestif       # Data parsing nesting
          - gocognit     # Complex data transformation

      # Attribute parser - complex value reading
      - path: internal/core/attribute\.go
        linters:
          - funlen       # Attribute parsing logic
          - gocyclo      # Type handling
          - cyclop       # Value reading complexity
          - nestif       # Type detection nesting
          - gocognit     # Complex value conversion

      # Dataspace parser - dimension handling
      - path: internal/core/dataspace\.go
        linters:
          - funlen       # Dataspace parsing logic
          - gocyclo      # Dimension detection
          - cyclop       # Size calculation complexity
          - nestif       # Dimension parsing nesting
          - gocognit     # Complex dimension logic

      # Filter pipeline - compression handling
      - path: internal/core/filterpipeline\.go
        linters:
          - funlen       # Filter parsing logic
          - gocyclo      # Filter type handling
          - cyclop       # Pipeline complexity
          - nestif       # Filter chain nesting
          - gocognit     # Complex filter processing

      # Global heap - variable-length data
      - path: internal/core/globalheap\.go
        linters:
          - funlen       # Heap parsing logic
          - gocyclo      # Object reading
          - cyclop       # Heap complexity
          - nestif       # Object iteration nesting
          - gocognit     # Complex heap navigation

      # Datatype parser - HDF5 type system is complex
      - path: internal/core/datatype\.go
        linters:
          - funlen       # Type parsing is detailed
          - gocyclo      # Type class switching
          - cyclop       # Type conversion complexity
          - gocognit     # Complex type system

      # B-tree structures - inherently complex tree algorithms
      - path: internal/structures/btree.*\.go
        linters:
          - funlen       # Tree traversal functions
          - gocyclo      # Node type handling
          - nestif       # Tree navigation nesting
          - gocognit     # Complex tree algorithms

      # Link messages - modern HDF5 linking
      - path: internal/structures/linkmessage\.go
        linters:
          - funlen       # Link parsing logic
          - gocyclo      # Link type handling
          - cyclop       # Link complexity
          - nestif       # Link parsing nesting
          - gocognit     # Complex link processing

      # Symbol table - legacy HDF5 format complexity
      - path: internal/structures/symboltable.*\.go
        linters:
          - funlen       # Symbol table parsing
          - nestif       # Entry iteration nesting
          - gocognit     # Complex symbol processing

      # Group loading - multiple format support
      - path: group\.go
        linters:
          - funlen       # Group loading logic
          - gocyclo      # Format detection branching
          - cyclop       # Link processing complexity
          - nestif       # Nested group traversal
          - gocognit     # Complex group processing

      # Examples - demonstration code can be verbose
      # Multiple main() functions in examples/ is expected (each is standalone)
      - path: examples/.*\.go
        linters:
          - errcheck     # Examples may skip error handling for clarity
          - errorlint    # Examples may use %v instead of %w
          - funlen       # Example functions can be longer
          - gocyclo      # Example complexity acceptable
          - cyclop       # Example complexity acceptable
          - gocognit     # Example complexity acceptable
          - typecheck    # Skip typecheck for examples (multiple main)
          - godot        # Example comments don't need periods
          - revive       # Examples don't need full documentation
          - gosec        # Examples may have security warnings
          - gocritic     # Example patterns may differ

issues:
  # Show all issues
  max-issues-per-linter: 0
  max-same-issues: 0

  # Don't hide new issues in existing files
  new: false
